Uber Hypermedia
===============
:toc:
:numbered:

== Document Status
Author::
  Mike Amundsen, mca@amundsen.com
Status::
  *[white red-background]#Working Draft#*
  
////
  *[white blue-background]#Submitted to IANA#*
  *[white green-background]#Approved by IANA#*
////
  
Last Updated::
  {docdate}
Proposed IANA Registrations::
  +application/vnd.amundsen-uber+xml+, +application/vnd.amundsen-uber+json+
  
== General
The Uber message format is a minimal read/write hypermedia type designed to support simple state transfers and ad-hoc hypermedia-based transitions. This document describes both the XML and JSON variants of the format and provides guidelines for supporting Uber messages over the HTTP protocol.

=== Design Goals
The Uber message model has a number of design goals:

 * Keep the message structure as lean as possible.
 * Support all the H-Factors <<hfactor,[HFactor]>> in hypermedia controls.
 * Be compatible with multiple protocols (e.g. HTTP, CoAP, etc.)
 * Maintain fidelity for more than one base message format (XML, JSON, etc.)

=== Messages, Not Code
The Uber message model is designed to be a 'message' format and not a source code format. It is optimized for cross-format use (XML and JSON) and not optimized to be directly serialized into source code or data objects. This is especially noticeable in the JSON variant of Uber. However, the Uber message model 'is' designed to make it relatively easy to write a parser that can consistently transform Uber messages into object models (and back again). 

=== Compliance
An implementation is not compliant if it fails to satisfy one or more of the MUST or REQUIRED elements. An implementation that satisfies all the MUST and REQUIRED elements as well as all the SHOULD and RECOMMENDED elements is said to be "unconditionally compliant"; one that satisfies all the MUST and REQUIRED elements but not all the SHOULD and RECOMMENDED elements is said to be "conditionally compliant."

[NOTE]
====
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 <<rfc2119,[RFC2119]>>.
====

== The Uber Message Model
The Uber message model is very minimal. There are three elements, eleven possible attributes, and seven reserved string values.

=== Elements
There are only three elements in the Uber message model:

+<uber>+::
  The root element of all Uber messages
+<data>+::
  The main element in Uber messages. 
+<error>+::
  The element that carries error details from the previous request.

=== Attributes
There are eleven attributes in the Uber design:

+id+::
  The document-wide unique identifier for this element.
+name+::
  A document-wide non-unique identifer for this element.
+rel+::
  Contains a space-separated list of link relation values.
+url+::
  A resolvable URL associated with this element. 
+action+::
  The network request verb associated with this element. 
+transclude+::
  Indicates whether the content that is returned from the URL should be embedded within the currently loaded document 
+model+::
  Contains a template to be used to construct URL query strings or request bodies depending on the value in the +action+ attribute. 
+send-format+::
  Contains the media type identifier of the format to use when sending request bodies.
+receive-format+::
  Contains the media type identifier of the format to expect when recieving request bodies.
+value+::
  In the XML variant of the Uber mesage format, inner text of the +<data>+ element contains the value associated with that element. In the JSON variant there is a +value+ attribute that contains the associated value.
+version+::
  Indiates the Uber message version information.
  
=== Reserved Strings
There are three reserved strings used as possible values for Uber attributes.

Reserved values for the +action+ attribute::
  * +append+ : An unsafe, non-idempotent request to add a new item.
  * +diff+ : An unsafe, non-idemponent request to modify parts of an existing item.
  * +read+ : A safe, idempotent request.
  * +remove+ : An unsafe, idempontent request to delete an existing item.
  * +replace+ : An unsafe, idemponent request to replace an existing item.

Reserved values for the +transclude+ attribute::
  * +true+ : embed the results of the request into the current document
  * +false+ : treat the associated +url+ value as a 'navigation' to a new document.

=== Message Map
Below is a simple `map' of the Uber message format (XML variant). Along with the three elements, there are ten attributed (indicated by the `@' character). The +<data>+ element can appear as a child element of +<uber>+ and +<error>+ and may be nested as many times as needed.

----
<!-- XML variant -->
<uber @version>
  <data @id @name @rel @url @action @transclude @model @send-format @receive-format>
    <data ... >
       <data ... />
    </data>  
  </data>
  <error>
    <data @id @name @rel @url @action @transclude @model @send-format @receive-format>
       <data ... />
    </data>
  </error>
</uber>
----

=== The +<uber>+ Element
This is the root element of an Uber message. Every Uber message MUST have this as it's root. The +<uber>+ element has one optional attribute: +version+ which carries the Uber message version information. For this release, all Uber messages SHOULD be set to the value of "1.0". If the +version+ attribute is missing, it SHOULD be assumed to be set to "1.0".

.Example +<uber>+ Elements
----
<!-- XML format -->
<uber version="1.0">
...
</uber>

// JSON format
{"uber" : {"version" : "1.0", ...} }
----  

=== The +<data>+ Element
The +<data>+ element is the key element in the model. A valid Uber message SHOULD contain at least one +<data>+ element. If it does appear, the +<data>+ element appears as a child of the +<uber>+ or +<error>+ elements. The +<data>+ element MAY be nested as many times as needed. The +<data>+ element has the following attributes (all attributes are OPTIONAL):

+id+::
  The document-wide unique identifier for this element. The value of +id+ must begin with a letter ([A-Za-z]) and may be followed by any number of letters, digits ([0-9]), hyphens ("-"), underscores ("_"), colons (":"), and periods ("."). If the +id+ attribute is present, it SHOULD be treated as an in-document reference as described in section 3.5 of RFC3986 <<rfc3986,[RFC3986]>>.
  
+name+::
  A document-wide non-unique identifer for this element. The value of +name+ must begin with a letter ([A-Za-z]) and may be followed by any number of letters, digits ([0-9]), hyphens ("-"), underscores ("_"), colons (":"), and periods ("."). If the +name+ attribute is present it SHOULD be used as a variable in the Uber +model+ attribute as described in <<rfc6570,[RFC65670]>>.
  
+rel+::
  Contains a space-separated list of link relation values. These values SHOULD conform to those described in RFC5988 <<rfc5988, [RFC5988]>>.
  
+url+::
  A resolvable URL associated with this element. The value SHOULD conform to that described in RFC3986 <<rfc3986,[RFC3986]>>.
  
+action+::
  The network request verb associated with this element. The list of valid values for this element are:

  * +append+ : An unsafe, non-idempotent request to add a new item (e.g. +HTTP.POST+)
  * +diff+ : An unsafe, non-idemponent request to modify parts of an existing item (e.g. +HTTP.PATCH+)
  * +read+ : A safe, idempotent request (e.g. +HTTP.GET+)
  * +remove+ : An unsafe, idempontent request to delete an existing item (e.g. +HTTP.DELETE+)
  * +replace+ : An unsafe, idemponent request to replace an existing item (e.g. +HTTP.PUT+)

+
When the +<data>+ element has a +url+ attribute but no +action+ attribute, it SHOULD be assumed the +action+ attribute is set to +read+. Any value other than those listed here SHOULD be treated as +read+.
  
+transclude+::
  Indicates whether the content that is returned from the URL should be embedded within the currently loaded document (+transclude="true"+) or treated as a 'navigation' to a new document (+transclude="false"+). If the attribute is missing, it SHOULD be assumed to be set to +false+ (e.g. 'navigation').
  
+model+::
  Contains a RFC6570-compliant <<rfc6570,[RFC6570]>> string to be used to construct URL query strings or request bodies depending on the value in the +action+ attribute. If the +action+ attribute is set to +read+ or +remove+ then the +model+ is applied to the query string. If the +action+ value is set to +append+, +diff+, or +update+ then the +model+ is applied to the request body. 
  
+send-format+::
  Contains the media type identifier of the format to use when sending request bodies. If this attribute is missing the setting should be assumed to be +application/x-www-form-urlencoded+ as described in RFC1867 <<rfc1867,[RFC1867]>>. 
  
+receive-format+::
  Contains the media type identifier of the format to expect when recieving request bodies. If this attribute is missing, the setting should be assumed to be +application/vnf.uber-amundsen+xml+.
  
+value+::
  In the XML variant of the Uber mesage format, inner text of the +<data>+ element contains the value associated with that element. In the JSON variant there is a +value+ attribute that contains the associated value. It is the responsibility of the document author to make sure the contents of the +value+ attribute are properly escaped as needed (per Section 2.4 of <<REC-XML,[REC-XML]>> and Section 2.5 of <<rfc4627,[RFC4627]>>).

.Example +<data>+ Elements
----
<!-- XML format -->
<uber version="1.0">
  <data id="root">
    <data rel="self" url="http://example.org/" />
    <data name="list" rel="collection" url="http://example.org/list/">
      <data name="search" rel="search" url="http://example.org/search" model="{&title}" />
      <data name="todo" rel="item" url="http://example.org/list/1">
        <data name="title">Clean House</data>
        <data name="dueDate">2014-05-01</data>
      </data>
      <data name="todo" rel="item" url="http://example.org/list/2">
        <data name="title">Paint the fence</data>
        <data name="dueDate">2014-06-01</data>
      </data>
    </data>
  </data>
</uber>

// JSON format
{
  "uber" : 
  {
    "version" : "1.0", 
    "data" :
    [
      {
        "id" : "root", 
        "data" :
        [
          {"rel" : "self", "url" : "http://example.org/"},
          {"name" : "list", "rel" : "collection", "url" : "http://example.org/list/"},
          "data" :
          [
            {
              "name" : "search, 
              "rel" : "search",
              "url" : "http://example.org/search",
              "model" : "{&title}"
            },
            {
              "name" : "todo",
              "rel" : "item",
              "url" : "http://example.org/list/1",
              "data" : 
              [
                {"name" : "title", "value" : "Clean house"},
                {"name" : "dueDate", "value" : "2014-05-01"}
              ]
            },
            {
              "name" : "todo",
              "rel" : "item",
              "url" : "http://example.org/list/2",
              "data" : 
              [
                {"name" : "title", "value" : "Paint the fence"},
                {"name" : "dueDate", "value" : "2014-06-01"}
              ]
            }
          ]  
        ]
      }    
    ]
  }
}
----

=== The +<error>+ Element
The +<error>+ element contains any error information returned by the server regarding the previous request. The +<error>+ element has no attributes. This is an OPTIONAL element. When present, it SHOULD contain one or more +<data>+ child elements. It is the +<data>+ child elements that contains error details.

.Example +<error>+ Elements
----
<!-- XML format -->
<uber version="1.0">
  <error>
    <data name="internal-error">q1w2e3</data>
    <data name="debug-data" url="http://example.org/debug/1" />
  </error>
</uber>

// JSON format
{
  "uber" :
  {
    "version" : "1.0",
    "error" : 
    {
      "data" : 
      [
        {"name" : "internal-error", "value" : "q1w2e3"},
        {"name" : "debug-data", "url" : "http://example.org/debug/1"}
      ]
    }
  }
}
----

== Implementation Guidelines
Since the Uber messsage format was designed to work with multiple application protocols (HTTP, CoAP, etc.), there needs to be some guidelines for createing a protocol-specific implementation that supports Uber documents. Below is the HTTP guidance for Uber documents. This can be used as a guide in creating (and documenting) other protocol-specific implemenations.

=== Supporting Uber Documents over HTTP
This section decribes the details of implementing Uber support over HTTP.

==== Mapping Uber +action+ Values to HTTP Methods
When implementating support for Uber documents over HTTP one of the key details is to map the value of Uber's +action+ attribute to HTTP methods. Table #1 below provides this mapping:

.Mapping HTTP Methods to Uber +action+ values
[grid="rows", format="csv"]
[options="header"]
|====
Uber Action,HTTP Method
+append+,POST
+diff+,PATCH
+remove+,DELETE
+read+,GET
+update+,PUT
|====

==== Using Uber +model+ Values to create HTTP Query Strings
When applied to HTTP, any +model+ value associated with a +data+ element with the +action+ attribute set to +read+ or +remove+ MUST be converted into a valid query string. The follwing example shows how an Uber message snippet is converted into a valid HTTP query string:

.Converting an Uber +read+ Action into an HTTP Query String
----
<!-- Uber snippet -->
<data name="search" 
  rel="search" 
  url="http://example.org/search" 
  model="?g={givenName}&f={familyName}&e={email}" />

Assume the values supplied are:
  givenName = Mike
  familyName = Amundsen
  email = mike@example.org

*** HTTP Request ***
GET /search/?g=Mike&f=Amundsen&e=mike%40example.org HTTP/1.1
Host: example.org
Accept-Type: application/vnd.amundsen-uber+xml
----

==== User Uber +model+ Values to create HTTP Request Bodies
Any +model+ value associated with a +data+ element with the +action+ attribute set to +append+, +diff+, or +update+ MUST be convereted into a valid HTTP request body. The follwing example shows how an Uber message snippet is converted into a valid HTTP request body:

.Converting an Uber +append+ Action into an HTTP Request
----
<!-- Uber snippet -->
<data name="create" 
  rel="http://example.org/rels/create" 
  url="http://example.org/people/" 
  model="g={givenName}&f={familyName}&e={email}&a={avatarUrl}"
  action="append" />

Assume the values supplied are:
  givenName = Mike
  familyName = Amundsen
  email = mike@example.org
  avatarUrl = http://example.org/avatars/mike.png

*** HTTP Request ***
POST /people/ HTTP/1.1
Host: example.org
Accept-Type: application/vnd.amundsen-uber+xml
Content-Type: application/x-www-form-urlencoded
Content-Lengt: xxx

g=Mike&f=Amundsen&e=mike%40example.org&a=http%3A%2F%2Fexample.org%2Favatars%2Fmike.png
----

=== Supporting Uber Documents Over other Protocols
It is possible that Uber documents can be exchanged using a protocol other than HTTP. In that case, it is the responsibility of the implementor to provide a guideline document that covers the same material included in the "Implementation Guidelines" of the Uber Message specification.

== Message Examples
Uber messages may appear in XML or JSON formats. Below are examples of each.

=== XML Example
Below is an XML Example of an Uber message.

.XML Example
----
<uber version="1.0">
  <data rel="self" url="http://example.org/" />
  <data rel="profile" url="http://example.org/profiles/people-and-places/" />
    
  <data id="people" rel="collection" url="http://example.org/people/">
    <data name="create" 
      rel="http://example.org/rels/create" 
      url="http://example.org/people/" 
      model="g={givenName}&f={familyName}&e={email}&a={avatarUrl}"
      action="append" />
    <data name="search" 
      rel="search" 
      url="http://example.org/search" 
      model="?g={givenName}&f={familyName}&e={email}" />
      
    <data name="person" rel="item" url="http://example.org/people/1">
      <data name="givenName">Mildred</data>
      <data name="familyName">Amundsen</data>
      <data name="email">mildred@example.org</data>
      <data name="avatarUrl" transclude="true">http://example.org/avatars/1</data>
    </data>
    <data name="person" rel="item" url="http://example.org/people/2">
      <data name="givenName">Mildred</data>
      <data name="familyName">Amundsen</data>
      <data name="email">mildred@example.org</data>
      <data name="avatarUrl" transclude="true">http://example.org/avatars/2</data>
    </data>
  </data>
  
  <data id="places" rel="collection" url="http://example.org/places/">
    <data name="search" rel="search" 
      url="http://example.org/search" 
      model="?r={addressRegion}&l={addressLocality}&p={postalCode}" />
      
    <data name="place" url="http://example.org/places/1">
      <data name="name">Home</data>
      <data name="address">
        <data name="streetAddress">123 Main</data>
        <data name="addressLocality">Byteville</data>
        <data name="addressRegion">MD</data>
        <data name="postalCode">12345</data>
      </data>
    </data>
    <data name="place" url="http://example.org/places/2">
      <data name="name">Work</data>
      <data name="address">
        <data name="streetAddress">456 Grand Ave.</data>
        <data name="addressLocality">Byteville</data>
        <data name="addressRegion">MD</data>
        <data name="postalCode">12345</data>
      </data>
    </data>
  </data>
  
</uber>
----

=== JSON Example
Below is a JSON Example of an Uber message.

.Uber JSON Example
----
{ 
  "uber" :
  {
    "version" : " 1.0",
    "data" :
    [
      {"rel" : "self", "url" : "http://example.org/"},
      {"rel" : "profile", "url" : "http://example.org/profiles/people-and-places"},
      "data" : 
      [
        {"id" : "people", "rel" : "collection", "url" : "http://example.org/people/"},
        "data" : 
        [
          {
            "name" : "create", 
            "rel" : "http://example.org/rels/create", 
            "url" : "http://example.org/people/",
            "model" : "g={givenName}&f={familyName}&e={email}",
            "action" : "append"
          },
          {
            "name" : "search",
            "rel" : "search",
            "url" : "http://example.org/people/search",
            "model" : "?g={givenName}&f={familyName}&e={email}"
          },
          {
            "name" : "person",
            "rel" : "item",
            "url" : "http://example.org/people/1",
            "data" :
            [
              {"name" : "givenName", "value" : "Mike"},
              {"name" : "familyName", "value" : "Amundsen"},
              {"name" : "email", "value" : "mike@example.org"},
              {"name" : "avatarUrl", "transclude" : "true", "value" : "http://example.org/avatars/1"}
            ]
          },
          {
            "name" : "person",
            "rel" : "item",
            "url" : "http://example.org/people/2",
            "data" :
            [
              {"name" : "givenName", "value" : "Mildred"},
              {"name" : "familyName", "value" : "Amundsen"},
              {"name" : "email", "value" : "mildred@example.org"},
              {"name" : "avatarUrl", "transclude" : "true", "value" : "http://example.org/avatars/2"}
            ]
          }
        ],
        {"id" : "places", "rel" : "collection", "url" : "http://example.org/places/"},
        "data" :
        [
          {
            "name" : "search",
            "rel" : "search",
            "url" : "http://example.org/places/search",
            "model" : "?r={addressRegion}&l={addressLocality}&p={postalCode}"
          },
          {
            "name" : "place",
            "rel" : "item",
            "url" : "http://example.org/places/a",
            "data" : 
            [
              {"name" : "name", "value" : "Home"},
              "data" :
              [
                {"name" : "streetAddress", "value" : "123 Main Street"},
                {"name" : "addressLocalitly", "value" : "Byteville"},
                {"name" : "addressRegion", "value" : "MD"},
                {"name" : "postalCode", "value" : "12345"}
              ]
            ]
          },
          {
            "name" : "place",
            "rel" : "item",
            "url" : "http://example.org/places/b",
            "data" : 
            [
              {"name" : "name", "value" : "Work"},
              "data" : 
              [
                {"name" : "streetAddress", "value" : "1456 Grand Ave."},
                {"name" : "addressLocalitly", "value" : "Byteville"},
                {"name" : "addressRegion", "value" : "MD"},
                {"name" : "postalCode", "value" : "12345"}
              ]
            ]
          }
        ]
      ]
    ]
  }
}
----

== Extensibility
This document describes the Uber message format markup vocabulary. Markup from other vocabularies ("foreign markup") can be used in an Uber document. Any extensions to the Uber Hypermedia vocabulary MUST not redefine any objects (or their properties), arrays, properties, link relations, or data types defined in this document. Clients that do not recognize extensions to the Uber vocabulary SHOULD ignore them.

The details of designing and implementing Uber extensions is beyond the scope of this document.

[NOTE]
====
It is possible that future forward-compatible modifications to this specification will include new objects, arrays, properties, link-relations, and data types. Extension designers should take care to prevent future modifications from breaking or redefining those extensions.
====

== IANA Considerations
Below are the related IANA considerations for this media type design.

=== XML Media Type Registration
+++[pending submission]+++

=== JSON Media Type Registration
+++[pending submission]+++

=== Security Considerations
The XML variant of the Uber message format shares security issues common to all XML content types. It does not provide executable content. Information contained in Uber documents do not require privacy or integrity services.

The JSON variant of the Uber message format shares security issues common to all JSON content types. See RFC4627 Section #6 <<rfc4627,[RFC4627]>> for additional information. The Uber message format does not provide executable content. Information contained in Uber documents do not require privacy or integrity services.

=== Internationalization Considerations
The Uber message format does not have any internationalization considerations other than those which are discussed in referenced RFC documents (see below).

== References 

 * [[hfactor]] [HFactor] "H Factor" http://amundsen.com/hypermedia/hfactor/
 * [[rfc1867]] [RFC1867] "Form-based File Upload in HTML" http://tools.ietf.org/search/rfc1867
 * [[rfc2119]] [RFC2119] "Key words for use in RFCs to Indicate Requirement Levels" http://tools.ietf.org/html/rfc2119
 * [[rfc3986]] [RFC3986] "Uniform Resource Identifier (URI): Generic Syntax" http://tools.ietf.org/html/rfc3986
 * [[rfc4627]] [RFC4627] "The application/json Media Type for JavaScript Object Notation (JSON)" http://tools.ietf.org/html/rfc4627
 * [[rfc5988]] [RFC5988] "URI Template" http://tools.ietf.org/html/rfc5988
 * [[rfc6570]] [RFC6570] "URI Template" http://tools.ietf.org/html/rfc6570
 * [[REC-XML]] [REC-XML] "Extensible Markup Language (XML) 1.0 (Fifth Edition)" http://www.w3.org/TR/REC-xml/
 
 
 

